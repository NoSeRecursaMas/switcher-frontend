import {
  render,
  screen,
  waitFor,
  cleanup,
  fireEvent,
} from "@testing-library/react";
import { describe, it, expect, beforeEach, afterEach, vi } from "vitest";
import { BrowserRouter as Router } from "react-router-dom";
import { UserContext } from "../../context/user-context";
import Home from "../../pages/home";
import MockAdapter from "axios-mock-adapter";
import roomMock from "../../api/room/room-mock";
import axios from "axios";
import * as utils from "../../services/utils";
import * as roomEndpoints from "../../api/room/room-endpoints";

let mock: MockAdapter;

beforeEach(() => {
  mock = new MockAdapter(axios, { onNoMatch: "throwException" });
});

afterEach(() => {
  cleanup();
  mock.restore();
});

describe("CreateRoom", () => {
  it("Abre el modal cuando se aprieta el bot칩n y se puede cerrar", async () => {
    render(
      <Router>
        <UserContext.Provider
          value={{
            user: { id: 1, username: "Nombre test" },
            setUser: () => null,
            isUserLoaded: true,
          }}
        >
          <Home />
        </UserContext.Provider>
      </Router>
    );

    // El bot칩n de crear partida deber칤a estar presente
    expect(screen.getByText("Crear partida")).toBeDefined();

    // El modal no deber칤a estar presente
    expect(screen.queryByText("Creaci칩n de partida")).toBeNull();

    // Se aprieta el bot칩n de crear partida y el modal deber칤a aparecer
    fireEvent.click(screen.getByRole("button", { name: "Crear partida" }));

    await waitFor(() => {
      expect(screen.getByText("Creaci칩n de partida")).toBeDefined();
    });

    // Se aprieta el bot칩n X y el modal deber칤a desaparecer
    fireEvent.click(screen.getByLabelText("Close"));

    await waitFor(() => {
      expect(screen.queryByText("Creaci칩n de partida")).toBeNull();
    });

    // Se aprieta el bot칩n de crear partida de vuelta y el modal deber칤a aparecer
    fireEvent.click(screen.getByRole("button", { name: "Crear partida" }));

    await waitFor(() => {
      expect(screen.getByText("Creaci칩n de partida")).toBeDefined();
    });

    // Se aprieta el segundo bot칩n para cerrar y el modal deber칤a desaparecer
    fireEvent.click(screen.getByText("Cancelar"));

    await waitFor(() => {
      expect(screen.queryByText("Creaci칩n de partida")).toBeNull();
    });
  });

  it("Se crea una partida con los datos correctos", async () => {
    const spy = vi.spyOn(roomEndpoints, "setRoomEndpoint");
    const spyToast = vi.spyOn(utils, "sendToast");

    roomMock(true);

    render(
      <Router>
        <UserContext.Provider
          value={{
            user: { id: 1, username: "Nombre test" },
            setUser: () => null,
            isUserLoaded: true,
          }}
        >
          <Home />
        </UserContext.Provider>
      </Router>
    );

    // Se aprieta el bot칩n de crear partida
    fireEvent.click(screen.getByRole("button", { name: "Crear partida" }));

    // Se llena el formulario con los datos correctos
    fireEvent.change(
      screen.getByLabelText("Nombre de la sala", { exact: false }),
      { target: { value: "Sala de prueba" } }
    );
    fireEvent.change(
      screen.getByLabelText("M칤nimo de jugadores", { exact: false }),
      { target: { value: "2" } }
    );
    fireEvent.change(
      screen.getByLabelText("M치ximo de jugadores", { exact: false }),
      { target: { value: "4" } }
    );

    // Se aprieta el bot칩n de aceptar
    fireEvent.click(screen.getByText("Aceptar"));

    // Se deber칤a haber llamado a la funci칩n de crear sala
    await waitFor(() => {
      expect(spy).toHaveBeenCalled();
    });

    // Se deber칤a haber mostrado un toast de 칠xito
    await waitFor(() => {
      expect(spyToast).toHaveBeenCalledWith(
        "Sala creada exitosamente",
        null,
        "success"
      );
    });
  });

  it("Muestra error cuando el nombre es demasiado largo", async () => {
    render(
      <Router>
        <UserContext.Provider
          value={{
            user: { id: 1, username: "Nombre test" },
            setUser: () => null,
            isUserLoaded: true,
          }}
        >
          <Home />
        </UserContext.Provider>
      </Router>
    );

    // Se aprieta el bot칩n de crear partida
    fireEvent.click(screen.getByRole("button", { name: "Crear partida" }));

    // Se llena el formulario con un nombre demasiado largo
    fireEvent.change(
      screen.getByLabelText("Nombre de la sala", { exact: false }),
      { target: { value: "a".repeat(33) } }
    );

    // Se ponen los jugadores m칤nimos y m치ximos
    fireEvent.change(
      screen.getByLabelText("M칤nimo de jugadores", { exact: false }),
      { target: { value: "2" } }
    );
    fireEvent.change(
      screen.getByLabelText("M치ximo de jugadores", { exact: false }),
      { target: { value: "4" } }
    );

    // Se aprieta el bot칩n de aceptar
    fireEvent.click(screen.getByText("Aceptar"));

    // Deber칤a mostrar un error
    await waitFor(() => {
      expect(
        screen.getByText("El nombre no puede tener m치s de 32 caracteres")
      ).toBeDefined();
    });
  });

  it("Muestra errores cuando el nombre contiene caracteres inv치lidos", async () => {
    render(
      <Router>
        <UserContext.Provider
          value={{
            user: { id: 1, username: "Nombre test" },
            setUser: () => null,
            isUserLoaded: true,
          }}
        >
          <Home />
        </UserContext.Provider>
      </Router>
    );

    // Se aprieta el bot칩n de crear partida
    fireEvent.click(screen.getByRole("button", { name: "Crear partida" }));

    // Se llena el formulario con un nombre con caracteres inv치lidos
    fireEvent.change(
      screen.getByLabelText("Nombre de la sala", { exact: false }),
      { target: { value: "游뱂" } }
    );

    // Se ponen los jugadores m칤nimos y m치ximos
    fireEvent.change(
      screen.getByLabelText("M칤nimo de jugadores", { exact: false }),
      { target: { value: "2" } }
    );
    fireEvent.change(
      screen.getByLabelText("M치ximo de jugadores", { exact: false }),
      { target: { value: "4" } }
    );

    // Se aprieta el bot칩n de aceptar
    fireEvent.click(screen.getByText("Aceptar"));

    // Deber칤a mostrar un error
    await waitFor(() => {
      expect(
        screen.getByText("El nombre solo puede contener caracteres ASCII")
      ).toBeDefined();
    });
  });

  it("Muestra error cuando el m칤nimo de jugadores es mayor al m치ximo", async () => {
    render(
      <Router>
        <UserContext.Provider
          value={{
            user: { id: 1, username: "Nombre test" },
            setUser: () => null,
            isUserLoaded: true,
          }}
        >
          <Home />
        </UserContext.Provider>
      </Router>
    );

    // Se aprieta el bot칩n de crear partida
    fireEvent.click(screen.getByRole("button", { name: "Crear partida" }));

    // Se llena el formulario con un m칤nimo de jugadores mayor al m치ximo
    fireEvent.change(
      screen.getByLabelText("Nombre de la sala", { exact: false }),
      { target: { value: "Sala de prueba" } }
    );
    fireEvent.change(
      screen.getByLabelText("M칤nimo de jugadores", { exact: false }),
      { target: { value: "4" } }
    );
    fireEvent.change(
      screen.getByLabelText("M치ximo de jugadores", { exact: false }),
      { target: { value: "2" } }
    );

    // Se aprieta el bot칩n de aceptar
    fireEvent.click(screen.getByText("Aceptar"));

    // Deber칤a mostrar un error
    await waitFor(() => {
      expect(
        screen.getByText("El m칤nimo de jugadores debe ser menor o igual al m치ximo")
      ).toBeDefined();
    });
  });
});
